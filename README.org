#+TITLE: Mitigation Manager

This project contains all the necessary resources to build and deploy the
Mitigation Manager on the ResilMesh network.

* Deployment

The Mitigation Manager is packaged inside a Docker image and deployed using
Docker Compose.

** Creating the ResilMesh network

All ResilMesh containers run on a special network called =resilmesh_network=.
This network should be created in advance with the following command:

#+NAME: mitigation-manager-create-network
#+begin_src sh
  docker network create resilmesh_network
#+end_src

** Using the correct deployment profile

By default, this project deploys in development mode.  This includes a local
NATS broker, and exposes the Mitigation Manager port on the host machine.  To
deploy in release mode, simply delete the =compose.override.yaml= file.

** (OPTIONAL) Set environment variables

The project includes a =.env.example= file with information regarding the
available environment variables.  Note that sensible values are provided for all
variables by default.  To edit these defaults simply make a copy of the file,
rename it to =.env=, and replace any values as desired.

** Launching the Mitigation Manager

#+NAME: mitigation-manager-run
#+begin_src sh :results verbatim
  docker compose up --build -d
#+end_src

#+NAME: mitigation-manager-stop
#+begin_src sh
  docker compose down --remove-orphans
#+end_src

* Default configuration

The Mitigation Manager is, by default, configured to detect and respond to the
following events:

- Remote connection using ~ncat~.
- Execution permissions added to Python files.
- Ransomware signature detected in a downloaded file.

More specifically, the Mitigation Manager's default configuration includes a
simple attack flow that assumes an attacker performing the aforementioned steps
in sequence.  Additionally, it includes the attack flows used during Pilot 1.

Detection of these events requires the Mitigation Manager to understand the
format of their corresponding alerts received through NATS.  The default
configuration assumes the alerts follow a format similar to Wazuh rules with the
following special fields:

** Remote connection alert

#+NAME: example-rule-100002
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:31:15.007+0000",
    "rule": {
      "level": 14,
      "description": "Connection via ncat from source port 11234 to 192.168.200.1:36210. PID: 3613",
      "id": "100002",
      "mitre": {
        "id": [
          "T1041",
          "T1219"
        ],
        "tactic": [
          "Exfiltration",
          "Command and Control"
        ],
        "technique": [
          "Exfiltration Over C2 Channel",
          "Remote Access Software"
        ]
      },
      "firedtimes": 1,
      "mail": true,
      "groups": [
        "established_conn"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589475.25117",
    "full_log": "ncat 3613 848a20e98d52:11234->192.168.200.1:36210",
    "decoder": {
      "name": "lsof_ncat_decoder"
    },
    "data": {
      "pid": "3613",
      "src_port": "11234",
      "dst_ip": "192.168.200.1",
      "dst_port": "36210"
    },
    "location": "command_ncat_conn"
  }
#+end_src

** Execute permissions alert

#+NAME: example-rule-100003
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:18:46.153+0000",
    "rule": {
      "level": 8,
      "description": "Execute permission added to python script.",
      "id": "100003",
      "mitre": {
        "id": [
          "T1222.002"
        ],
        "tactic": [
          "Defense Evasion"
        ],
        "technique": [
          "Linux and Mac File and Directory Permissions Modification"
        ]
      },
      "firedtimes": 4,
      "mail": false,
      "groups": [
        "syscheck"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729588726.22091",
    "full_log": "File '/tmp/zerologon_tester.py' modified\nMode: realtime\nChanged attributes: permission\nPermissions changed from 'rw-r--r--' to 'rwxr-xr-x'\n",
    "syscheck": {
      "path": "/tmp/zerologon_tester.py",
      "mode": "realtime",
      "size_after": "3041",
      "perm_before": "rw-r--r--",
      "perm_after": "rwxr-xr-x",
      "uid_after": "0",
      "gid_after": "0",
      "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
      "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
      "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
      "uname_after": "root",
      "gname_after": "root",
      "mtime_after": "2024-10-22T09:16:02",
      "inode_after": 151477998,
      "changed_attributes": [
        "permission"
      ],
      "event": "modified"
    },
    "decoder": {
      "name": "syscheck_integrity_changed"
    },
    "location": "syscheck"
  }
#+end_src

** File added alert

#+NAME: example-rule-100004
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:25:39.991+0000",
    "rule": {
      "level": 8,
      "description": "Executable file added to filesystem",
      "id": "100004",
      "mitre": {
        "id": [
          "T1204.002"
        ],
        "tactic": [
          "Execution"
        ],
        "technique": [
          "Malicious File"
        ]
      },
      "firedtimes": 8,
      "mail": false,
      "groups": [
        "filesystem"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589139.24598",
    "full_log": "File '/tmp/zerologon_tester.py' added\nMode: realtime\n",
    "syscheck": {
      "path": "/tmp/zerologon_tester.py",
      "mode": "realtime",
      "size_after": "3041",
      "perm_after": "rw-r--r--",
      "uid_after": "0",
      "gid_after": "0",
      "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
      "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
      "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
      "uname_after": "root",
      "gname_after": "root",
      "mtime_after": "2024-10-22T09:25:39",
      "inode_after": 151477998,
      "event": "added"
    },
    "decoder": {
      "name": "syscheck_new_entry"
    },
    "location": "syscheck"
  }
#+end_src

** Flow Processor alert

#+NAME: example-rule-100100
#+begin_src json-ts
  {
    "input": {
      "type": "log"
    },
    "agent": {
      "name": "wazuh.manager",
      "id": "000"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "data": {
      "attack_flow_alert": {
        "multi_class_accuracy": "0.998451",
        "datetime": "2025-09-08 11:43:33.943443",
        "destination_ip": "10.185.2.97",
        "destination_port": "3306",
        "attack_type": "Slowloris",
        "source_port": "54026",
        "confidence": "0.999998",
        "flow_features": {
          "max_ttl_dl": "64",
          "numbytes_ul": "1682",
          "avg_iat_ul": "47.388889",
          "min_ttl_dl": "63",
          "numpackets_1s_dl": "10014.306152",
          "stddev_iat_dl": "92.854313",
          "numpackets_dl": "14",
          "numbytes_dl": "2522",
          "min_ttl_ul": "63",
          "flow_duration": "0.001398",
          "numpackets_1s_ul": "12875.536481",
          "min_iat_dl": "0",
          "min_packetsize_dl": "66",
          "stddev_packetsize_dl": "232.712839",
          "numpackets_ul": "18",
          "avg_packetsize_ul": "93.444444",
          "numpackets_ratio": "0",
          "bits_1s_dl": "1804005.722461",
          "min_iat_ul": "0",
          "avg_ttl_dl": "63.500000",
          "stddev_packetsize_ul": "57.412951",
          "stddev_ttl_dl": "0.500000",
          "min_packetsize_ul": "66",
          "avg_packetsize_dl": "180.142857",
          "max_iat_dl": "0",
          "max_packetsize_dl": "745",
          "max_ttl_ul": "64",
          "stddev_iat_ul": "78.013630",
          "bits_1s_ul": "1203147.353362",
          "stddev_ttl_ul": "0.500000",
          "avg_ttl_ul": "63.500000",
          "avg_iat_dl": "38.928571",
          "max_packetsize_ul": "250",
          "max_iat_ul": "286"
        },
        "source_ip": "127.0.0.1"
      }
    },
    "rule": {
      "firedtimes": 10,
      "mail": true,
      "level": 12,
      "description": "Attack Flow Detected: Slowloris from 10.185.2.97 to 127.0.0.1.",
      "groups": [
        "attack_flow"
      ],
      "id": "100100",
      "mitre": {
        "id": [
          "T1110",
          "T1499"
        ]
      }
    },
    "location": "API-Webhook",
    "decoder": {
      "name": "json"
    },
    "id": "1757331811.18627989",
    "full_log": "{\"attack_flow_alert\": {\"datetime\": \"2025-09-08 11:43:33.943443\", \"source_ip\": \"10.185.2.97\", \"source_port\": 54026, \"destination_ip\": \"127.0.0.1\", \"destination_port\": 3306, \"multi_class_accuracy\": 0.998450765321931, \"attack_type\": \"Slowloris\", \"confidence\": 0.9999980926513672, \"flow_features\": {\"flow_duration\": 0.001398, \"numpackets_ul\": 18, \"numpackets_dl\": 14, \"numpackets_ratio\": 0, \"numpackets_1s_ul\": 12875.536480686695, \"numpackets_1s_dl\": 10014.306151645207, \"numbytes_ul\": 1682, \"numbytes_dl\": 2522, \"bits_1s_ul\": 1203147.3533619456, \"bits_1s_dl\": 1804005.722460658, \"max_packetsize_ul\": 250, \"max_packetsize_dl\": 745, \"min_packetsize_ul\": 66, \"min_packetsize_dl\": 66, \"avg_packetsize_ul\": 93.44444444444443, \"avg_packetsize_dl\": 180.14285714285717, \"stddev_packetsize_ul\": 57.412950747895266, \"stddev_packetsize_dl\": 232.71283872215227, \"max_ttl_ul\": 64, \"max_ttl_dl\": 64, \"min_ttl_ul\": 63, \"min_ttl_dl\": 63, \"avg_ttl_ul\": 63.5, \"avg_ttl_dl\": 63.5, \"stddev_ttl_ul\": 0.5, \"stddev_ttl_dl\": 0.5, \"max_iat_ul\": 286, \"max_iat_dl\": 0, \"min_iat_ul\": 0, \"min_iat_dl\": 0, \"avg_iat_ul\": 47.388888888888886, \"avg_iat_dl\": 38.92857142857143, \"stddev_iat_ul\": 78.01363049627851, \"stddev_iat_dl\": 92.85431314369707}}}",
    "timestamp": "2025-09-08T11:43:31.955+0000"
  }
#+end_src

* COMMENT Babel

** Variables

#+NAME: mitigation-manager-port
: 8002

#+NAME: example-dummy-alert
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:31:15.007+0000",
    "rule": {
      "#condition": true
    }
  }
#+end_src

#+NAME: example-rule-100002
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:31:15.007+0000",
    "rule": {
      "level": 14,
      "description": "Connection via ncat from source port 11234 to 192.168.200.1:36210. PID: 3613",
      "id": "100002",
      "mitre": {
        "id": [
          "T1041",
          "T1219"
        ],
        "tactic": [
          "Exfiltration",
          "Command and Control"
        ],
        "technique": [
          "Exfiltration Over C2 Channel",
          "Remote Access Software"
        ]
      },
      "firedtimes": 1,
      "mail": true,
      "groups": [
        "established_conn"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589475.25117",
    "full_log": "ncat 3613 848a20e98d52:11234->192.168.200.1:36210",
    "decoder": {
      "name": "lsof_ncat_decoder"
    },
    "data": {
      "pid": "3613",
      "src_port": "11234",
      "dst_ip": "192.168.200.1",
      "dst_port": "36210"
    },
    "location": "command_ncat_conn"
  }
#+end_src

#+NAME: example-rule-100003
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:18:46.153+0000",
    "rule": {
      "level": 8,
      "description": "Execute permission added to python script.",
      "id": "100003",
      "mitre": {
        "id": [
          "T1222.002"
        ],
        "tactic": [
          "Defense Evasion"
        ],
        "technique": [
          "Linux and Mac File and Directory Permissions Modification"
        ]
      },
      "firedtimes": 4,
      "mail": false,
      "groups": [
        "syscheck"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729588726.22091",
    "full_log": "File \"/tmp/zerologon_tester.py\" modified\nMode: realtime\nChanged attributes: permission\nPermissions changed from \"rw-r--r--\" to \"rwxr-xr-x\"\n",
      "syscheck": {
        "path": "/tmp/zerologon_tester.py",
        "mode": "realtime",
        "size_after": "3041",
        "perm_before": "rw-r--r--",
        "perm_after": "rwxr-xr-x",
        "uid_after": "0",
        "gid_after": "0",
        "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
        "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
        "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
        "uname_after": "root",
        "gname_after": "root",
        "mtime_after": "2024-10-22T09:16:02",
        "inode_after": 151477998,
        "changed_attributes": [
          "permission"
        ],
        "event": "modified"
      },
    "decoder": {
      "name": "syscheck_integrity_changed"
    },
    "location": "syscheck"
  }
#+end_src

#+NAME: example-rule-100004
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:25:39.991+0000",
    "rule": {
      "level": 8,
      "description": "Executable file added to filesystem",
      "id": "100004",
      "mitre": {
        "id": [
          "T1204.002"
        ],
        "tactic": [
          "Execution"
        ],
        "technique": [
          "Malicious File"
        ]
      },
      "firedtimes": 8,
      "mail": false,
      "groups": [
        "filesystem"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589139.24598",
    "full_log": "File \"/tmp/zerologon_tester.py\" added\nMode: realtime\n",
    "syscheck": {
      "path": "/tmp/zerologon_tester.py",
      "mode": "realtime",
      "size_after": "3041",
      "perm_after": "rw-r--r--",
      "uid_after": "0",
      "gid_after": "0",
      "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
      "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
      "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
      "uname_after": "root",
      "gname_after": "root",
      "mtime_after": "2024-10-22T09:25:39",
      "inode_after": 151477998,
      "event": "added"
    },
    "decoder": {
      "name": "syscheck_new_entry"
    },
    "location": "syscheck"
  }
#+end_src

#+NAME: example-rule-100100
#+begin_src json-ts
  {
    "input": {
      "type": "log"
    },
    "agent": {
      "name": "wazuh.manager",
      "id": "000"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "data": {
      "attack_flow_alert": {
        "multi_class_accuracy": "0.998451",
        "datetime": "2025-09-08 11:43:33.943443",
        "destination_ip": "10.185.2.97",
        "destination_port": "3306",
        "attack_type": "Slowloris",
        "source_port": "54026",
        "confidence": "0.999998",
        "flow_features": {
          "max_ttl_dl": "64",
          "numbytes_ul": "1682",
          "avg_iat_ul": "47.388889",
          "min_ttl_dl": "63",
          "numpackets_1s_dl": "10014.306152",
          "stddev_iat_dl": "92.854313",
          "numpackets_dl": "14",
          "numbytes_dl": "2522",
          "min_ttl_ul": "63",
          "flow_duration": "0.001398",
          "numpackets_1s_ul": "12875.536481",
          "min_iat_dl": "0",
          "min_packetsize_dl": "66",
          "stddev_packetsize_dl": "232.712839",
          "numpackets_ul": "18",
          "avg_packetsize_ul": "93.444444",
          "numpackets_ratio": "0",
          "bits_1s_dl": "1804005.722461",
          "min_iat_ul": "0",
          "avg_ttl_dl": "63.500000",
          "stddev_packetsize_ul": "57.412951",
          "stddev_ttl_dl": "0.500000",
          "min_packetsize_ul": "66",
          "avg_packetsize_dl": "180.142857",
          "max_iat_dl": "0",
          "max_packetsize_dl": "745",
          "max_ttl_ul": "64",
          "stddev_iat_ul": "78.013630",
          "bits_1s_ul": "1203147.353362",
          "stddev_ttl_ul": "0.500000",
          "avg_ttl_ul": "63.500000",
          "avg_iat_dl": "38.928571",
          "max_packetsize_ul": "250",
          "max_iat_ul": "286"
        },
        "source_ip": "127.0.0.1"
      }
    },
    "rule": {
      "firedtimes": 10,
      "mail": true,
      "level": 12,
      "description": "Attack Flow Detected: Slowloris from 10.185.2.97 to 127.0.0.1.",
      "groups": [
        "attack_flow"
      ],
      "id": "100100",
      "mitre": {
        "id": [
          "T1110",
          "T1499"
        ]
      }
    },
    "location": "API-Webhook",
    "decoder": {
      "name": "json"
    },
    "id": "1757331811.18627989",
    "full_log": "{\"attack_flow_alert\": {\"datetime\": \"2025-09-08 11:43:33.943443\", \"source_ip\": \"10.185.2.97\", \"source_port\": 54026, \"destination_ip\": \"127.0.0.1\", \"destination_port\": 3306, \"multi_class_accuracy\": 0.998450765321931, \"attack_type\": \"Slowloris\", \"confidence\": 0.9999980926513672, \"flow_features\": {\"flow_duration\": 0.001398, \"numpackets_ul\": 18, \"numpackets_dl\": 14, \"numpackets_ratio\": 0, \"numpackets_1s_ul\": 12875.536480686695, \"numpackets_1s_dl\": 10014.306151645207, \"numbytes_ul\": 1682, \"numbytes_dl\": 2522, \"bits_1s_ul\": 1203147.3533619456, \"bits_1s_dl\": 1804005.722460658, \"max_packetsize_ul\": 250, \"max_packetsize_dl\": 745, \"min_packetsize_ul\": 66, \"min_packetsize_dl\": 66, \"avg_packetsize_ul\": 93.44444444444443, \"avg_packetsize_dl\": 180.14285714285717, \"stddev_packetsize_ul\": 57.412950747895266, \"stddev_packetsize_dl\": 232.71283872215227, \"max_ttl_ul\": 64, \"max_ttl_dl\": 64, \"min_ttl_ul\": 63, \"min_ttl_dl\": 63, \"avg_ttl_ul\": 63.5, \"avg_ttl_dl\": 63.5, \"stddev_ttl_ul\": 0.5, \"stddev_ttl_dl\": 0.5, \"max_iat_ul\": 286, \"max_iat_dl\": 0, \"min_iat_ul\": 0, \"min_iat_dl\": 0, \"avg_iat_ul\": 47.388888888888886, \"avg_iat_dl\": 38.92857142857143, \"stddev_iat_ul\": 78.01363049627851, \"stddev_iat_dl\": 92.85431314369707}}}",
    "timestamp": "2025-09-08T11:43:31.955+0000"
  }
#+end_src

** Code blocks

#+NAME: docker-compose-run
#+begin_src sh :var file="docker-compose.yaml" :results verbatim
  docker compose -f $file up -d 2>&1p
#+end_src

#+NAME: docker-compose-kill
#+begin_src sh :var file="docker-compose.yaml" :results verbatim
  docker compose -f $file down --remove-orphans 2>&1
#+end_src

#+NAME: mitigation-manager-get-version
#+begin_src verb :wrap src ob-verb-response
  GET http://localhost:{{(org-sbe mitigation-manager-port)}}/version
#+end_src

#+NAME: mitigation-manager-handle-ncat-connection
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100002)}}
#+end_src

#+NAME: mitigation-manager-handle-execution-permissions-added
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100003)}}
#+end_src

#+NAME: mitigation-manager-handle-executable-added
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100004)}}
#+end_src

#+NAME: mitigation-manager-handle-flow-processor-alert
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100100)}}
#+end_src

* COMMENT Demonstration 1

** Video script

This video demonstration will showcase the current progress of task 5.4 of the
ReslMesh project: attack mitigation.  For this demonstration, we will be
evaluating the performance of the Mitigation Manager component, using the
components highlighted on the architecture diagram.  The flow starts on the
monitored user device, shown here at the bottom.  This computer has both a
Wahzoo agent and an OpenC2 Actuator installed, the latter being tasked with
enforcing the mitigations for the scenarios showcased in this video.  When a
security event is detected by the agent, it triggers the generation of an alert
on the Wahzoo server, which will be automatically forwarded through the NATS
broker.  The Mitigation Manager will be listening to NATS; as soon as the Wahzoo
alert is received, it will begin the mitigation process.  Once a suitable
mitigation has been decided, the Mitigation Manager will then trigger the
corresponding Shuffle playbooks using the REST API exposed by this service.
These playbooks will then make use of the OpenC2 Orchestrator server to enforce
actions on the affected device.

We will be simulating a Youbuntoo desktop as the user device, and will
demonstrate two types of attacks.  The first scenario will simulate a remote
connection using n cat, and will use a mitigation playbook that kills the
connection process.  In the second scenario, a malicious Python script will be
given execution permissions on the device, which will be mitigated using a
playbook that removes the file from the filesystem if it is detected to contain
malware.

Here are the mitigation playbooks.  The n cat playbook directly instructs the
OpenC2 Orchestrator to kill the process.  The file deletion playbook, on the
other hand, uses the VirusTotal API to check for malware signatures first.  If
no malicious contents are detected, the file is kept as is.  Otherwise, the
Orchestrator is instructed to delete it.

Here is the first scenario.  On the right, we have a terminal instance opened on
the user device.  On the top left we can find the terminal used by the attacker,
and on the bottom left we can inspect the Mitigation Manager logs.

Let's start with the first scenario, and open a remote connection using n cat.
Not long after the attacker has gained a shell on the target, the Mitigation
Manager receives the Wahzoo alert and begins the mitigation process.  It all
happens on a flash; the alert is parsed, the mitigation calculated, and the
playbook executed.  Almost immediately after gaining access, the attacker is
safely locked out of the system.

For the second scenario, we have prepared a malicious Python script inside a
monitored folder.  When this file gains execution permissions, the Mitigation
Manager will receive a new alert and calculate a different mitigation; in this
case, the file is removed from the filesystem.

Let's examine the generated logs to get some insights on how the Mitigation
Manager processes alerts.  The Manager follows the same procedure for both
scenarios, but arrives at different solutions.  We can observe how the
Mitigation Manager first updates the ongoing attack graphs, and recalculates the
attack front.  In both scenarios, the attack front starts out empty, and is
subsequently filled with the latest alert's attack node.  Next, the Mitigation
Manager updates node probabilities based on the currently fulfilled conditions,
which it calculates using information from the I SIM component.  Once all the
in-memory state has been updated, the Manager selects the nodes directly
affected by this alert and begins the mitigation selection process.  Leveraging
the I SIM data, the Mitigation Manager filters out applicable workflows, and
finally settles on a solution for each scenario.

** Logs

#+begin_comment
Srv 0 12:59:25 INFO: New incoming alert
Srv 0 12:59:25 DEBUG: Connection via ncat from source port 11234 to 192.168.200.1:46956. PID: 4607
Srv 0 12:59:25 INFO: Updating local state
Srv 0 12:59:25 INFO: Advancing attack front
Srv 0 12:59:25 DEBUG: Current attack front:  []
Srv 0 12:59:25 DEBUG: Attack front after advancement: []
Srv 0 12:59:25 DEBUG: Graph 100 has no attacks ongoing, adding
Srv 0 12:59:25 DEBUG: Final attack front after new graphs: ['Attack 1 on graph 100 node 100']
Srv 0 12:59:25 DEBUG: Updating probabilities
Srv 0 12:59:25 DEBUG: Skipping probability update of node 100 (no meaningful change)
Srv 0 12:59:25 DEBUG: Committing changes to DB
Srv 0 12:59:25 DEBUG: Node 100 is directly impacted by the alert, mitigating
Srv 0 12:59:25 DEBUG: Resolving optimal workflow for attack node
Srv 0 12:59:25 DEBUG: Applicable workflows for attack T1041: ['close_conn']
Srv 0 12:59:25 DEBUG: Applying workflow "close_conn"
Srv 0 12:59:25 DEBUG: Executing workflow "close_conn"
Srv 0 12:59:25 INFO: Workflows applied successfully

Srv 0 12:59:48 INFO: New incoming alert
Srv 0 12:59:48 DEBUG: Execute permission added to python script.
Srv 0 12:59:48 INFO: Updating local state
Srv 0 12:59:48 INFO: Advancing attack front
Srv 0 12:59:48 DEBUG: Current attack front:  []
Srv 0 12:59:48 DEBUG: Attack front after advancement: []
Srv 0 12:59:48 DEBUG: Graph 101 has no attacks ongoing, adding
Srv 0 12:59:48 DEBUG: Final attack front after new graphs: ['Attack 1 on graph 101 node 101']
Srv 0 12:59:48 DEBUG: Updating probabilities
Srv 0 12:59:48 DEBUG: Skipping probability update of node 101 (no meaningful change)
Srv 0 12:59:48 DEBUG: Committing changes to DB
Srv 0 12:59:48 DEBUG: Node 101 is directly impacted by the alert, mitigating
Srv 0 12:59:48 DEBUG: Resolving optimal workflow for attack node
Srv 0 12:59:48 DEBUG: Applicable workflows for attack T1222.002: ['delete_file']
Srv 0 12:59:48 DEBUG: Applying workflow "delete_file"
Srv 0 12:59:48 DEBUG: Executing workflow "delete_file"
Srv 0 12:59:48 INFO: Workflows applied successfully
#+end_comment

* COMMENT Demonstration 2

** Video script

This video demonstration will showcase the current progress of task 5.4 of the
ReslMesh project: attack mitigation.  We will be evaluating the new and improved
architecture of the Mitigation Manager component, and discuss the implications
of integrating an AI planning engine within the mitigation process.

First, let's get an overview of the relevant components.  The attack mitigation
task focuses around the Security Operations layer, highlighted here in red. This
part of ReslMesh is in charge of deciding the most suitable responses against
security incidents, by identifying attacks and adversaries and orchestrating
mitigation actions against them.  The Mitigation Manager component is tasked
with the decision making process, and is aided by the Playbooks Tool and
Workflow Orchestrator components to enforce mitigations in the form of CoA
playbooks.

We will be focusing on the Mitigation Manager component, as it is the component
with the most changes when compared against the previous iteration.  The
Mitigation Manager initiates the attack mitigation flow when receiving a
security alert from Wahzoo, through a NATS message queue.  The component makes
use of the cyber situational awareness and risk score information available
through the I SIM component to enrich its internal state, used to run the AI
planning phase in order to obtain a mitigation plan.  Finally, the Mitigation
Manager will trigger the execution of the obtained workflows through the
Playbooks Tool and Workflow Orchestrator components, as well as initiate any
pentesting exercise through the AI-based Automated Security Testing component.

Featured in the updated attack mitigation process is the integration of an AI
planning engine for the decision making process.  To achieve this, we have
rewritten the Mitigation Manager component in Clojure to take advantage of the
OptaPlanner AI constraint solver. OptaPlanner allows us to model our attack
mitigation problem as a set of entities, variables, and constraints, which can
then be iterated upon by the solver in a highly efficient and optimized process
in order to obtain the solution state that best suits the situational
requirements.  The attack tracking logic from the previous implementation has
been ported over and used to enrich the information available to the planning
engine, in order to allow it to reach solutions that take into account potential
future attacks and the effectiveness of past mitigations.

Modelling the attack mitigation scenario as a planning problem allows us to
easily encode new business logic in the form of OptaPlanner constraints.  Hard
constraints are used for critical requirements (such as the mitigation of all
alerts above a certain risk threshold), while soft constraints are used to prune
the valid solution space in search of the optimal one (like incentivizing
mitigations with low associated costs).  We have modelled the planning problem
so that an upper limit of mitigations per solution can be specified, as well as
to allow the solver to return no mitigations, if a suitable one cannot be found
with the provided constraints.  Our model also accepts more than one alert per
run, which allows us to batch multiple alerts together to further enrich the
data fed to the solver.  Finally, a time budget for the AI solving phase can
also be configured, a critical feature for mitigation of time-sensitive attacks.

Let's demonstrate the Mitigation Manager in a simulated scenario.  We will be
running the component on the fullscreen terminal.  On the second terminal, we
will trigger a REST endpoint to manually publish Wahzoo alerts.  We will
simulate two mitigation flows using two alerts.  The first scenario is triggered
by a remote connection using n cat, and is mitigated using a playbook that
terminates the connection.  The second scenario is triggered by the change in
permissions of a local file, mitigated by enforcing the deletion of the file.

Let's publish the first alert.  Immediately after publishing, we can see the
Mitigation Manager updating the local state, running the AI planning engine,
obtaining a solution, and executing the selected playbook.  Note that for
demonstration purposes, we have configured the Mitigation Manager to spend 1
second in the solver phase.  In the logs, we can spot that the attack state has
been updated after receiving the alert, since it has triggered an attack node
corresponding to an n cat remote connection.

Let's publish the second alert, and see how the Mitigation Manager responds. The
mitigation process is the same, but we can spot a few differences in the output.
First, note that the state has been updated once again, since the alert has
triggered the next node in the attack graph.  This is also reflected in the
final mitigation solution, which this time references the file deletion
workflow.

** Logs

I lost the actual logs, I only have a cropped version.

#+begin_comment
WARNING: list already refers to: #'clojure.core/list in namespace: mitigation-engine.state
WARNING: vector already refers to: #'clojure.core/vector in namespace: mitigation-engine.s
WARNING: get already refers to: #'clojure.core/get in namespace: mitigation-engine.state.n
2025-10-05T16:28:49.144063088Z INFO LOG EPNL mitigation-engine.main[14,3] Starting server
2025-10-05T16:28:49.385180066Z INFO LOG EPNL mitigation-engine.server[84,5] Server started
2025-10-05T16:29:14.223535110Z INFO LOG EPNL mitigation-engine.core[87,3] Handling alert
   data: {:alert {:rule_id "100002", :mitre-ids ["T1041" "T1219"], :agent_id "001", :agent
rt "36210", :connection_pid "3613"}}
2025-10-05T16:29:14.231013107Z INFO LOG EPNL mitigation-engine.state[76,3] Updating state
2025-10-05T16:29:14.234282802Z INFO LOG EPNL mitigation-engine.core[95,32] Attack node tri
   data: {:node {:id #uuid "d422d11d-1667-4bc3-93e0-8a36f2a64654", :description "Remote co
6c8"), :previous ()}, :alert {:rule_id "100002", :mitre-ids ["T1041" "T1219"], :agent_id "
ction_dst_port "36210", :connection_pid "3613"}}
2025-10-05T16:29:14.251983679Z INFO LOG EPNL mitigation-engine.core[54,11] Running solver
   data: {:alerts 1, :workflows 4, :mitigation-slots 10, :seconds-limit 1}
2025-10-05T16:29:16.599390751Z INFO LOG EPNL mitigation-engine.core[79,5] Solution found
   data: {:solution #object[es.um.mitigation_engine.MitigationEngine 0x21af23a "es.um.miti
2025-10-05T16:29:16.616220764Z INFO LOG EPNL mitigation-engine.state.workflow-instance[33,
   data: {:description "Closes a remote connection", :url "http://shuffle-frontend/api/v1/
 "11234", :agent_id "001", :dst_port "36210", :actuator_ip "192.168.200.200"}}
2025-10-05T16:29:16.777197053Z INFO LOG EPNL mitigation-engine.state.workflow-instance[42,
2025-10-05T16:29:46.614849637Z INFO LOG EPNL mitigation-engine.core[87,3] Handling alert
   data: {:alert {:rule_id "100003", :mitre-ids ["T1222.002"], :file_hash "84dc56d99268f70
 "001", :agent_ip "192.168.200.200"}}
2025-10-05T16:29:46.615135146Z INFO LOG EPNL mitigation-engine.state[76,3] Updating state
2025-10-05T16:29:46.616180531Z INFO LOG EPNL mitigation-engine.core[95,32] Attack node tri
   data: {:node {:id #uuid "bf4f7379-a0b1-4f87-8771-e43af18ca6c8", :description "Python sc
cript", :params {}, :args {}, :query (and)} {:description "File is executable", :params {}
9-1a00-4dbd-a165-ca8f91c6d48c")}, :alert {:rule_id "100003", :mitre-ids ["T1222.002"], :fi
s "rwxr-xr-x", :agent_id "001", :agent_ip "192.168.200.200"}}
2025-10-05T16:29:46.617095201Z INFO LOG EPNL mitigation-engine.core[95,32] Attack node tri
   data: {:node {:id #uuid "bf4f7379-a0b1-4f87-8771-e43af18ca6c8", :description "Python sc
cript", :params {}, :args {}, :query (and)} {:description "File is executable", :params {}
9-1a00-4dbd-a165-ca8f91c6d48c")}, :alert {:rule_id "100003", :mitre-ids ["T1222.002"], :fi
s "rwxr-xr-x", :agent_id "001", :agent_ip "192.168.200.200"}}
2025-10-05T16:29:46.618081120Z INFO LOG EPNL mitigation-engine.core[54,11] Running solver
   data: {:alerts 1, :workflows 4, :mitigation-slots 10, :seconds-limit 1}
2025-10-05T16:29:48.041586945Z INFO LOG EPNL mitigation-engine.core[79,5] Solution found
   data: {:solution #object[es.um.mitigation_engine.MitigationEngine 0xdc62265 "es.um.miti
2025-10-05T16:29:48.042815677Z INFO LOG EPNL mitigation-engine.state.workflow-instance[33,
   data: {:description "Deletes a file", :url "http://shuffle-frontend/api/v1/hooks/webhoo
le_path "/tmp/zerologon_tester.py", :agent_id "001", :actuator_ip "192.168.200.200"}}
2025-10-05T16:29:48.069607126Z INFO LOG EPNL mitigation-engine.state.workflow-instance[42,
^C2025-10-05T16:51:09.347082096Z INFO LOG EPNL mitigation-engine.main[22,3] Stopping serve
2025-10-05T16:51:09.360994297Z INFO LOG EPNL mitigation-engine.server[92,3] Server stopped
#+end_comment
